// This file is auto-generated by @hey-api/openapi-ts

export const Body_auth_ldap_loginSchema = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: 'string',
          pattern: '^password$',
        },
        {
          type: 'null',
        },
      ],
      title: 'Grant Type',
    },
    username: {
      type: 'string',
      title: 'Username',
    },
    password: {
      type: 'string',
      format: 'password',
      title: 'Password',
    },
    scope: {
      type: 'string',
      title: 'Scope',
      default: '',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client Id',
    },
    client_secret: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      format: 'password',
      title: 'Client Secret',
    },
  },
  type: 'object',
  required: ['username', 'password'],
  title: 'Body_auth-ldap_login',
} as const

export const Body_auth_login_access_tokenSchema = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: 'string',
          pattern: '^password$',
        },
        {
          type: 'null',
        },
      ],
      title: 'Grant Type',
    },
    username: {
      type: 'string',
      title: 'Username',
    },
    password: {
      type: 'string',
      format: 'password',
      title: 'Password',
    },
    scope: {
      type: 'string',
      title: 'Scope',
      default: '',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client Id',
    },
    client_secret: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      format: 'password',
      title: 'Client Secret',
    },
  },
  type: 'object',
  required: ['username', 'password'],
  title: 'Body_auth-login_access_token',
} as const

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const

export const ItemCreateSchema = {
  properties: {
    title: {
      type: 'string',
      maxLength: 255,
      minLength: 1,
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  required: ['title'],
  title: 'ItemCreate',
} as const

export const ItemPublicSchema = {
  properties: {
    title: {
      type: 'string',
      maxLength: 255,
      minLength: 1,
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    id: {
      type: 'string',
      format: 'uuid',
      title: 'Id',
    },
    owner_id: {
      type: 'string',
      format: 'uuid',
      title: 'Owner Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: ['title', 'id', 'owner_id', 'created_at', 'updated_at'],
  title: 'ItemPublic',
} as const

export const ItemSortFieldSchema = {
  type: 'string',
  enum: ['title', 'created_at', 'updated_at'],
  title: 'ItemSortField',
} as const

export const ItemUpdateSchema = {
  properties: {
    title: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
          minLength: 1,
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  title: 'ItemUpdate',
} as const

export const ItemsPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/ItemPublic',
      },
      type: 'array',
      title: 'Data',
    },
    page: {
      type: 'integer',
      title: 'Page',
    },
    size: {
      type: 'integer',
      title: 'Size',
    },
    total: {
      type: 'integer',
      title: 'Total',
    },
    pages: {
      type: 'integer',
      title: 'Pages',
    },
  },
  type: 'object',
  required: ['data', 'page', 'size', 'total', 'pages'],
  title: 'ItemsPublic',
} as const

export const MessageSchema = {
  properties: {
    message: {
      type: 'string',
      title: 'Message',
    },
  },
  type: 'object',
  required: ['message'],
  title: 'Message',
} as const

export const NewPasswordSchema = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
    },
    new_password: {
      type: 'string',
      maxLength: 40,
      minLength: 8,
      title: 'New Password',
    },
  },
  type: 'object',
  required: ['token', 'new_password'],
  title: 'NewPassword',
} as const

export const PrivateUserCreateSchema = {
  properties: {
    email: {
      type: 'string',
      title: 'Email',
    },
    password: {
      type: 'string',
      title: 'Password',
    },
    full_name: {
      type: 'string',
      title: 'Full Name',
    },
    is_verified: {
      type: 'boolean',
      title: 'Is Verified',
      default: false,
    },
  },
  type: 'object',
  required: ['email', 'password', 'full_name'],
  title: 'PrivateUserCreate',
} as const

export const SortOrderSchema = {
  type: 'string',
  enum: ['asc', 'desc'],
  title: 'SortOrder',
} as const

export const TokenSchema = {
  properties: {
    access_token: {
      type: 'string',
      title: 'Access Token',
    },
    token_type: {
      type: 'string',
      title: 'Token Type',
      default: 'bearer',
    },
  },
  type: 'object',
  required: ['access_token'],
  title: 'Token',
} as const

export const UpdatePasswordSchema = {
  properties: {
    current_password: {
      type: 'string',
      maxLength: 40,
      minLength: 8,
      title: 'Current Password',
    },
    new_password: {
      type: 'string',
      maxLength: 40,
      minLength: 8,
      title: 'New Password',
    },
  },
  type: 'object',
  required: ['current_password', 'new_password'],
  title: 'UpdatePassword',
} as const

export const UserCreateSchema = {
  properties: {
    email: {
      type: 'string',
      maxLength: 255,
      format: 'email',
      title: 'Email',
    },
    username: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
      default: true,
    },
    is_superuser: {
      type: 'boolean',
      title: 'Is Superuser',
      default: false,
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Full Name',
    },
    password: {
      type: 'string',
      maxLength: 40,
      minLength: 8,
      title: 'Password',
    },
  },
  type: 'object',
  required: ['email', 'password'],
  title: 'UserCreate',
} as const

export const UserPublicSchema = {
  properties: {
    email: {
      type: 'string',
      maxLength: 255,
      format: 'email',
      title: 'Email',
    },
    username: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
      default: true,
    },
    is_superuser: {
      type: 'boolean',
      title: 'Is Superuser',
      default: false,
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Full Name',
    },
    id: {
      type: 'string',
      format: 'uuid',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: ['email', 'id', 'created_at', 'updated_at'],
  title: 'UserPublic',
} as const

export const UserRegisterSchema = {
  properties: {
    email: {
      type: 'string',
      maxLength: 255,
      format: 'email',
      title: 'Email',
    },
    password: {
      type: 'string',
      maxLength: 40,
      minLength: 8,
      title: 'Password',
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Full Name',
    },
  },
  type: 'object',
  required: ['email', 'password'],
  title: 'UserRegister',
} as const

export const UserSortFieldSchema = {
  type: 'string',
  enum: ['email', 'username', 'full_name', 'created_at', 'updated_at'],
  title: 'UserSortField',
} as const

export const UserUpdateSchema = {
  properties: {
    email: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
    username: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
      default: true,
    },
    is_superuser: {
      type: 'boolean',
      title: 'Is Superuser',
      default: false,
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Full Name',
    },
    password: {
      anyOf: [
        {
          type: 'string',
          maxLength: 40,
          minLength: 8,
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
    },
  },
  type: 'object',
  title: 'UserUpdate',
} as const

export const UserUpdateMeSchema = {
  properties: {
    full_name: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Full Name',
    },
    email: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
    username: {
      anyOf: [
        {
          type: 'string',
          maxLength: 255,
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
  },
  type: 'object',
  title: 'UserUpdateMe',
} as const

export const UsersPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/UserPublic',
      },
      type: 'array',
      title: 'Data',
    },
    page: {
      type: 'integer',
      title: 'Page',
    },
    size: {
      type: 'integer',
      title: 'Size',
    },
    total: {
      type: 'integer',
      title: 'Total',
    },
    pages: {
      type: 'integer',
      title: 'Pages',
    },
  },
  type: 'object',
  required: ['data', 'page', 'size', 'total', 'pages'],
  title: 'UsersPublic',
} as const

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const
