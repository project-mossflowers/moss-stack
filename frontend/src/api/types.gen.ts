// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_auth-ldap_login
 */
export type BodyAuthLdapLogin = {
  /**
   * Grant Type
   */
  grant_type?: string | null
  /**
   * Username
   */
  username: string
  /**
   * Password
   */
  password: string
  /**
   * Scope
   */
  scope?: string
  /**
   * Client Id
   */
  client_id?: string | null
  /**
   * Client Secret
   */
  client_secret?: string | null
}

/**
 * Body_auth-login_access_token
 */
export type BodyAuthLoginAccessToken = {
  /**
   * Grant Type
   */
  grant_type?: string | null
  /**
   * Username
   */
  username: string
  /**
   * Password
   */
  password: string
  /**
   * Scope
   */
  scope?: string
  /**
   * Client Id
   */
  client_id?: string | null
  /**
   * Client Secret
   */
  client_secret?: string | null
}

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>
}

/**
 * ItemCreate
 */
export type ItemCreate = {
  /**
   * Title
   */
  title: string
  /**
   * Description
   */
  description?: string | null
}

/**
 * ItemPublic
 */
export type ItemPublic = {
  /**
   * Title
   */
  title: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Id
   */
  id: string
  /**
   * Owner Id
   */
  owner_id: string
  /**
   * Created At
   */
  created_at: Date
  /**
   * Updated At
   */
  updated_at: Date
}

/**
 * ItemSortField
 */
export const ItemSortField = {
  TITLE: 'title',
  CREATED_AT: 'created_at',
  UPDATED_AT: 'updated_at',
} as const

/**
 * ItemSortField
 */
export type ItemSortField = (typeof ItemSortField)[keyof typeof ItemSortField]

/**
 * ItemUpdate
 */
export type ItemUpdate = {
  /**
   * Title
   */
  title?: string | null
  /**
   * Description
   */
  description?: string | null
}

/**
 * ItemsPublic
 */
export type ItemsPublic = {
  /**
   * Data
   */
  data: Array<ItemPublic>
  /**
   * Page
   */
  page: number
  /**
   * Size
   */
  size: number
  /**
   * Total
   */
  total: number
  /**
   * Pages
   */
  pages: number
}

/**
 * Message
 */
export type Message = {
  /**
   * Message
   */
  message: string
}

/**
 * NewPassword
 */
export type NewPassword = {
  /**
   * Token
   */
  token: string
  /**
   * New Password
   */
  new_password: string
}

/**
 * PrivateUserCreate
 */
export type PrivateUserCreate = {
  /**
   * Email
   */
  email: string
  /**
   * Password
   */
  password: string
  /**
   * Full Name
   */
  full_name: string
  /**
   * Is Verified
   */
  is_verified?: boolean
}

/**
 * SortOrder
 */
export const SortOrder = {
  ASC: 'asc',
  DESC: 'desc',
} as const

/**
 * SortOrder
 */
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]

/**
 * Token
 */
export type Token = {
  /**
   * Access Token
   */
  access_token: string
  /**
   * Token Type
   */
  token_type?: string
}

/**
 * UpdatePassword
 */
export type UpdatePassword = {
  /**
   * Current Password
   */
  current_password: string
  /**
   * New Password
   */
  new_password: string
}

/**
 * UserCreate
 */
export type UserCreate = {
  /**
   * Email
   */
  email: string
  /**
   * Username
   */
  username?: string | null
  /**
   * Is Active
   */
  is_active?: boolean
  /**
   * Is Superuser
   */
  is_superuser?: boolean
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Password
   */
  password: string
}

/**
 * UserPublic
 */
export type UserPublic = {
  /**
   * Email
   */
  email: string
  /**
   * Username
   */
  username?: string | null
  /**
   * Is Active
   */
  is_active?: boolean
  /**
   * Is Superuser
   */
  is_superuser?: boolean
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Id
   */
  id: string
  /**
   * Created At
   */
  created_at: Date
  /**
   * Updated At
   */
  updated_at: Date
}

/**
 * UserRegister
 */
export type UserRegister = {
  /**
   * Email
   */
  email: string
  /**
   * Password
   */
  password: string
  /**
   * Full Name
   */
  full_name?: string | null
}

/**
 * UserSortField
 */
export const UserSortField = {
  EMAIL: 'email',
  USERNAME: 'username',
  FULL_NAME: 'full_name',
  CREATED_AT: 'created_at',
  UPDATED_AT: 'updated_at',
} as const

/**
 * UserSortField
 */
export type UserSortField = (typeof UserSortField)[keyof typeof UserSortField]

/**
 * UserUpdate
 */
export type UserUpdate = {
  /**
   * Email
   */
  email?: string | null
  /**
   * Username
   */
  username?: string | null
  /**
   * Is Active
   */
  is_active?: boolean
  /**
   * Is Superuser
   */
  is_superuser?: boolean
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Password
   */
  password?: string | null
}

/**
 * UserUpdateMe
 */
export type UserUpdateMe = {
  /**
   * Full Name
   */
  full_name?: string | null
  /**
   * Email
   */
  email?: string | null
  /**
   * Username
   */
  username?: string | null
}

/**
 * UsersPublic
 */
export type UsersPublic = {
  /**
   * Data
   */
  data: Array<UserPublic>
  /**
   * Page
   */
  page: number
  /**
   * Size
   */
  size: number
  /**
   * Total
   */
  total: number
  /**
   * Pages
   */
  pages: number
}

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>
  /**
   * Message
   */
  msg: string
  /**
   * Error Type
   */
  type: string
}

export type AuthLoginAccessTokenData = {
  body: BodyAuthLoginAccessToken
  path?: never
  query?: never
  url: '/api/v1/auth/access-token'
}

export type AuthLoginAccessTokenErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AuthLoginAccessTokenError =
  AuthLoginAccessTokenErrors[keyof AuthLoginAccessTokenErrors]

export type AuthLoginAccessTokenResponses = {
  /**
   * Successful Response
   */
  200: Token
}

export type AuthLoginAccessTokenResponse =
  AuthLoginAccessTokenResponses[keyof AuthLoginAccessTokenResponses]

export type AuthLdapLoginData = {
  body: BodyAuthLdapLogin
  path?: never
  query?: never
  url: '/api/v1/auth/ldap-login'
}

export type AuthLdapLoginErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AuthLdapLoginError = AuthLdapLoginErrors[keyof AuthLdapLoginErrors]

export type AuthLdapLoginResponses = {
  /**
   * Successful Response
   */
  200: Token
}

export type AuthLdapLoginResponse =
  AuthLdapLoginResponses[keyof AuthLdapLoginResponses]

export type AuthLdapStatusData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/auth/ldap-status'
}

export type AuthLdapStatusResponses = {
  /**
   * Response Auth-Ldap Status
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type AuthLdapStatusResponse =
  AuthLdapStatusResponses[keyof AuthLdapStatusResponses]

export type AuthTestTokenData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/auth/test-token'
}

export type AuthTestTokenResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type AuthTestTokenResponse =
  AuthTestTokenResponses[keyof AuthTestTokenResponses]

export type AuthRecoverPasswordData = {
  body?: never
  path: {
    /**
     * Email
     */
    email: string
  }
  query?: never
  url: '/api/v1/password-recovery/{email}'
}

export type AuthRecoverPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AuthRecoverPasswordError =
  AuthRecoverPasswordErrors[keyof AuthRecoverPasswordErrors]

export type AuthRecoverPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type AuthRecoverPasswordResponse =
  AuthRecoverPasswordResponses[keyof AuthRecoverPasswordResponses]

export type AuthResetPasswordData = {
  body: NewPassword
  path?: never
  query?: never
  url: '/api/v1/reset-password/'
}

export type AuthResetPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AuthResetPasswordError =
  AuthResetPasswordErrors[keyof AuthResetPasswordErrors]

export type AuthResetPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type AuthResetPasswordResponse =
  AuthResetPasswordResponses[keyof AuthResetPasswordResponses]

export type AuthRecoverPasswordHtmlContentData = {
  body?: never
  path: {
    /**
     * Email
     */
    email: string
  }
  query?: never
  url: '/api/v1/password-recovery-html-content/{email}'
}

export type AuthRecoverPasswordHtmlContentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AuthRecoverPasswordHtmlContentError =
  AuthRecoverPasswordHtmlContentErrors[keyof AuthRecoverPasswordHtmlContentErrors]

export type AuthRecoverPasswordHtmlContentResponses = {
  /**
   * Successful Response
   */
  200: string
}

export type AuthRecoverPasswordHtmlContentResponse =
  AuthRecoverPasswordHtmlContentResponses[keyof AuthRecoverPasswordHtmlContentResponses]

export type UsersReadUsersData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (starts from 1)
     */
    page?: number
    /**
     * Size
     * Number of users per page
     */
    size?: number
    /**
     * Search
     * Search in email and full name
     */
    search?: string | null
    /**
     * Field to sort by
     */
    sort_by?: UserSortField
    /**
     * Sort order (asc/desc)
     */
    sort_order?: SortOrder
  }
  url: '/api/v1/users/'
}

export type UsersReadUsersErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUsersError =
  UsersReadUsersErrors[keyof UsersReadUsersErrors]

export type UsersReadUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersPublic
}

export type UsersReadUsersResponse =
  UsersReadUsersResponses[keyof UsersReadUsersResponses]

export type UsersCreateUserData = {
  body: UserCreate
  path?: never
  query?: never
  url: '/api/v1/users/'
}

export type UsersCreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersCreateUserError =
  UsersCreateUserErrors[keyof UsersCreateUserErrors]

export type UsersCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersCreateUserResponse =
  UsersCreateUserResponses[keyof UsersCreateUserResponses]

export type UsersDeleteUserMeData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersDeleteUserMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserMeResponse =
  UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses]

export type UsersReadUserMeData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersReadUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserMeResponse =
  UsersReadUserMeResponses[keyof UsersReadUserMeResponses]

export type UsersUpdateUserMeData = {
  body: UserUpdateMe
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersUpdateUserMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserMeError =
  UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors]

export type UsersUpdateUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserMeResponse =
  UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses]

export type UsersUpdatePasswordMeData = {
  body: UpdatePassword
  path?: never
  query?: never
  url: '/api/v1/users/me/password'
}

export type UsersUpdatePasswordMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdatePasswordMeError =
  UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors]

export type UsersUpdatePasswordMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersUpdatePasswordMeResponse =
  UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses]

export type UsersRegisterUserData = {
  body: UserRegister
  path?: never
  query?: never
  url: '/api/v1/users/signup'
}

export type UsersRegisterUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersRegisterUserError =
  UsersRegisterUserErrors[keyof UsersRegisterUserErrors]

export type UsersRegisterUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersRegisterUserResponse =
  UsersRegisterUserResponses[keyof UsersRegisterUserResponses]

export type UsersDeleteUserData = {
  body?: never
  path: {
    /**
     * User Id
     */
    user_id: string
  }
  query?: never
  url: '/api/v1/users/{user_id}'
}

export type UsersDeleteUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersDeleteUserError =
  UsersDeleteUserErrors[keyof UsersDeleteUserErrors]

export type UsersDeleteUserResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserResponse =
  UsersDeleteUserResponses[keyof UsersDeleteUserResponses]

export type UsersReadUserByIdData = {
  body?: never
  path: {
    /**
     * User Id
     */
    user_id: string
  }
  query?: never
  url: '/api/v1/users/{user_id}'
}

export type UsersReadUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUserByIdError =
  UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors]

export type UsersReadUserByIdResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserByIdResponse =
  UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses]

export type UsersUpdateUserData = {
  body: UserUpdate
  path: {
    /**
     * User Id
     */
    user_id: string
  }
  query?: never
  url: '/api/v1/users/{user_id}'
}

export type UsersUpdateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserError =
  UsersUpdateUserErrors[keyof UsersUpdateUserErrors]

export type UsersUpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserResponse =
  UsersUpdateUserResponses[keyof UsersUpdateUserResponses]

export type ItemsReadItemsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (starts from 1)
     */
    page?: number
    /**
     * Size
     * Number of items per page
     */
    size?: number
    /**
     * Search
     * Search in title and description
     */
    search?: string | null
    /**
     * Field to sort by
     */
    sort_by?: ItemSortField
    /**
     * Sort order (asc/desc)
     */
    sort_order?: SortOrder
  }
  url: '/api/v1/items/'
}

export type ItemsReadItemsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsReadItemsError =
  ItemsReadItemsErrors[keyof ItemsReadItemsErrors]

export type ItemsReadItemsResponses = {
  /**
   * Successful Response
   */
  200: ItemsPublic
}

export type ItemsReadItemsResponse =
  ItemsReadItemsResponses[keyof ItemsReadItemsResponses]

export type ItemsCreateItemData = {
  body: ItemCreate
  path?: never
  query?: never
  url: '/api/v1/items/'
}

export type ItemsCreateItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsCreateItemError =
  ItemsCreateItemErrors[keyof ItemsCreateItemErrors]

export type ItemsCreateItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic
}

export type ItemsCreateItemResponse =
  ItemsCreateItemResponses[keyof ItemsCreateItemResponses]

export type ItemsDeleteItemData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/items/{id}'
}

export type ItemsDeleteItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsDeleteItemError =
  ItemsDeleteItemErrors[keyof ItemsDeleteItemErrors]

export type ItemsDeleteItemResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type ItemsDeleteItemResponse =
  ItemsDeleteItemResponses[keyof ItemsDeleteItemResponses]

export type ItemsReadItemData = {
  body?: never
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/items/{id}'
}

export type ItemsReadItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsReadItemError = ItemsReadItemErrors[keyof ItemsReadItemErrors]

export type ItemsReadItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic
}

export type ItemsReadItemResponse =
  ItemsReadItemResponses[keyof ItemsReadItemResponses]

export type ItemsUpdateItemData = {
  body: ItemUpdate
  path: {
    /**
     * Id
     */
    id: string
  }
  query?: never
  url: '/api/v1/items/{id}'
}

export type ItemsUpdateItemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ItemsUpdateItemError =
  ItemsUpdateItemErrors[keyof ItemsUpdateItemErrors]

export type ItemsUpdateItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic
}

export type ItemsUpdateItemResponse =
  ItemsUpdateItemResponses[keyof ItemsUpdateItemResponses]

export type PrivateCreateUserData = {
  body: PrivateUserCreate
  path?: never
  query?: never
  url: '/api/v1/private/users/'
}

export type PrivateCreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PrivateCreateUserError =
  PrivateCreateUserErrors[keyof PrivateCreateUserErrors]

export type PrivateCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type PrivateCreateUserResponse =
  PrivateCreateUserResponses[keyof PrivateCreateUserResponses]

export type SystemHealthCheckData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/health-check/'
}

export type SystemHealthCheckResponses = {
  /**
   * Response System-Health Check
   * Successful Response
   */
  200: boolean
}

export type SystemHealthCheckResponse =
  SystemHealthCheckResponses[keyof SystemHealthCheckResponses]

export type ClientOptions = {
  baseURL: `${string}://${string}` | (string & {})
}
