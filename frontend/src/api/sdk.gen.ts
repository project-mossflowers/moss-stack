// This file is auto-generated by @hey-api/openapi-ts

import { urlSearchParamsBodySerializer } from './client'
import { client as _heyApiClient } from './client.gen'
import {
  authTestTokenResponseTransformer,
  itemsCreateItemResponseTransformer,
  itemsReadItemResponseTransformer,
  itemsReadItemsResponseTransformer,
  itemsUpdateItemResponseTransformer,
  privateCreateUserResponseTransformer,
  usersCreateUserResponseTransformer,
  usersReadUserByIdResponseTransformer,
  usersReadUserMeResponseTransformer,
  usersReadUsersResponseTransformer,
  usersRegisterUserResponseTransformer,
  usersUpdateUserMeResponseTransformer,
  usersUpdateUserResponseTransformer,
} from './transformers.gen'
import type { Client, Options as ClientOptions, TDataShape } from './client'
import type {
  AuthLdapLoginData,
  AuthLdapLoginErrors,
  AuthLdapLoginResponses,
  AuthLdapStatusData,
  AuthLdapStatusResponses,
  AuthLoginAccessTokenData,
  AuthLoginAccessTokenErrors,
  AuthLoginAccessTokenResponses,
  AuthRecoverPasswordData,
  AuthRecoverPasswordErrors,
  AuthRecoverPasswordHtmlContentData,
  AuthRecoverPasswordHtmlContentErrors,
  AuthRecoverPasswordHtmlContentResponses,
  AuthRecoverPasswordResponses,
  AuthResetPasswordData,
  AuthResetPasswordErrors,
  AuthResetPasswordResponses,
  AuthTestTokenData,
  AuthTestTokenResponses,
  ItemsCreateItemData,
  ItemsCreateItemErrors,
  ItemsCreateItemResponses,
  ItemsDeleteItemData,
  ItemsDeleteItemErrors,
  ItemsDeleteItemResponses,
  ItemsReadItemData,
  ItemsReadItemErrors,
  ItemsReadItemResponses,
  ItemsReadItemsData,
  ItemsReadItemsErrors,
  ItemsReadItemsResponses,
  ItemsUpdateItemData,
  ItemsUpdateItemErrors,
  ItemsUpdateItemResponses,
  Oauth2GetOauth2StatusData,
  Oauth2GetOauth2StatusResponses,
  Oauth2Oauth2CallbackData,
  Oauth2Oauth2CallbackErrors,
  Oauth2Oauth2CallbackResponses,
  Oauth2Oauth2LoginData,
  Oauth2Oauth2LoginErrors,
  Oauth2Oauth2LoginResponses,
  PrivateCreateUserData,
  PrivateCreateUserErrors,
  PrivateCreateUserResponses,
  SystemHealthCheckData,
  SystemHealthCheckResponses,
  UsersCreateUserData,
  UsersCreateUserErrors,
  UsersCreateUserResponses,
  UsersDeleteUserData,
  UsersDeleteUserErrors,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponses,
  UsersDeleteUserResponses,
  UsersReadUserByIdData,
  UsersReadUserByIdErrors,
  UsersReadUserByIdResponses,
  UsersReadUserMeData,
  UsersReadUserMeResponses,
  UsersReadUsersData,
  UsersReadUsersErrors,
  UsersReadUsersResponses,
  UsersRegisterUserData,
  UsersRegisterUserErrors,
  UsersRegisterUserResponses,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeErrors,
  UsersUpdatePasswordMeResponses,
  UsersUpdateUserData,
  UsersUpdateUserErrors,
  UsersUpdateUserMeData,
  UsersUpdateUserMeErrors,
  UsersUpdateUserMeResponses,
  UsersUpdateUserResponses,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests.
 * Supports both local and LDAP authentication.
 */
export const authLoginAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthLoginAccessTokenResponses,
    AuthLoginAccessTokenErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseType: 'json',
    url: '/api/v1/auth/access-token',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options.headers,
    },
  })
}

/**
 * Ldap Login
 * LDAP-only authentication endpoint
 */
export const authLdapLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthLdapLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthLdapLoginResponses,
    AuthLdapLoginErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseType: 'json',
    url: '/api/v1/auth/ldap-login',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options.headers,
    },
  })
}

/**
 * Ldap Status
 * Check LDAP configuration status
 */
export const authLdapStatus = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLdapStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthLdapStatusResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/auth/ldap-status',
    ...options,
  })
}

/**
 * Test Token
 * Test access token
 */
export const authTestToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthTestTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthTestTokenResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: authTestTokenResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/auth/test-token',
    ...options,
  })
}

/**
 * Recover Password
 * Password Recovery
 */
export const authRecoverPassword = <ThrowOnError extends boolean = false>(
  options: Options<AuthRecoverPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthRecoverPasswordResponses,
    AuthRecoverPasswordErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/password-recovery/{email}',
    ...options,
  })
}

/**
 * Reset Password
 * Reset password
 */
export const authResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<AuthResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthResetPasswordResponses,
    AuthResetPasswordErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/reset-password/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const authRecoverPasswordHtmlContent = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthRecoverPasswordHtmlContentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthRecoverPasswordHtmlContentResponses,
    AuthRecoverPasswordHtmlContentErrors,
    ThrowOnError
  >({
    responseType: 'text',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/password-recovery-html-content/{email}',
    ...options,
  })
}

/**
 * Read Users
 * Retrieve users with pagination, filtering, and sorting.
 *
 * Args:
 * page: Page number (1-based)
 * size: Number of users per page (1-100)
 * search: Search term for email and full name
 * sort_by: Field to sort by (email, full_name)
 * sort_order: Sort order (asc/desc)
 *
 * Returns:
 * Paginated list of users with metadata
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(
  options?: Options<UsersReadUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersReadUsersResponses,
    UsersReadUsersErrors,
    ThrowOnError
  >({
    responseTransformer: usersReadUsersResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/',
    ...options,
  })
}

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersCreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersCreateUserResponses,
    UsersCreateUserErrors,
    ThrowOnError
  >({
    responseTransformer: usersCreateUserResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(
  options?: Options<UsersDeleteUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    UsersDeleteUserMeResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/me',
    ...options,
  })
}

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
  options?: Options<UsersReadUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersReadUserMeResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: usersReadUserMeResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/me',
    ...options,
  })
}

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateUserMeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUpdateUserMeResponses,
    UsersUpdateUserMeErrors,
    ThrowOnError
  >({
    responseTransformer: usersUpdateUserMeResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/me',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Update Password Me
 * Update own password.
 */
export const usersUpdatePasswordMe = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdatePasswordMeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUpdatePasswordMeResponses,
    UsersUpdatePasswordMeErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/me/password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersRegisterUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersRegisterUserResponses,
    UsersRegisterUserErrors,
    ThrowOnError
  >({
    responseTransformer: usersRegisterUserResponseTransformer,
    responseType: 'json',
    url: '/api/v1/users/signup',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UsersDeleteUserResponses,
    UsersDeleteUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{user_id}',
    ...options,
  })
}

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(
  options: Options<UsersReadUserByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UsersReadUserByIdResponses,
    UsersReadUserByIdErrors,
    ThrowOnError
  >({
    responseTransformer: usersReadUserByIdResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{user_id}',
    ...options,
  })
}

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUpdateUserResponses,
    UsersUpdateUserErrors,
    ThrowOnError
  >({
    responseTransformer: usersUpdateUserResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{user_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Read Items
 * Retrieve items with pagination, filtering, and sorting.
 *
 * Args:
 * page: Page number (1-based)
 * size: Number of items per page (1-100)
 * search: Search term for title and description
 * sort_by: Field to sort by (title, created_at, updated_at)
 * sort_order: Sort order (asc/desc)
 *
 * Returns:
 * Paginated list of items with metadata
 */
export const itemsReadItems = <ThrowOnError extends boolean = false>(
  options?: Options<ItemsReadItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ItemsReadItemsResponses,
    ItemsReadItemsErrors,
    ThrowOnError
  >({
    responseTransformer: itemsReadItemsResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/items/',
    ...options,
  })
}

/**
 * Create Item
 * Create new item.
 */
export const itemsCreateItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsCreateItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ItemsCreateItemResponses,
    ItemsCreateItemErrors,
    ThrowOnError
  >({
    responseTransformer: itemsCreateItemResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/items/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete Item
 * Delete an item.
 */
export const itemsDeleteItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsDeleteItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ItemsDeleteItemResponses,
    ItemsDeleteItemErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/items/{id}',
    ...options,
  })
}

/**
 * Read Item
 * Get item by ID.
 */
export const itemsReadItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsReadItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ItemsReadItemResponses,
    ItemsReadItemErrors,
    ThrowOnError
  >({
    responseTransformer: itemsReadItemResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/items/{id}',
    ...options,
  })
}

/**
 * Update Item
 * Update an item.
 */
export const itemsUpdateItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsUpdateItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ItemsUpdateItemResponses,
    ItemsUpdateItemErrors,
    ThrowOnError
  >({
    responseTransformer: itemsUpdateItemResponseTransformer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/items/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Oauth2 Login
 * Initiate OAuth2 login with specified provider
 */
export const oauth2Oauth2Login = <ThrowOnError extends boolean = false>(
  options: Options<Oauth2Oauth2LoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    Oauth2Oauth2LoginResponses,
    Oauth2Oauth2LoginErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/auth/oauth2/{provider}',
    ...options,
  })
}

/**
 * Oauth2 Callback
 * Handle OAuth2 callback from provider
 */
export const oauth2Oauth2Callback = <ThrowOnError extends boolean = false>(
  options: Options<Oauth2Oauth2CallbackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    Oauth2Oauth2CallbackResponses,
    Oauth2Oauth2CallbackErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/auth/oauth2/{provider}/callback',
    ...options,
  })
}

/**
 * Get Oauth2 Status
 * Check OAuth2 provider configuration status
 */
export const oauth2GetOauth2Status = <ThrowOnError extends boolean = false>(
  options?: Options<Oauth2GetOauth2StatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    Oauth2GetOauth2StatusResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/auth/oauth2/status',
    ...options,
  })
}

/**
 * Create User
 * Create a new user.
 */
export const privateCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<PrivateCreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PrivateCreateUserResponses,
    PrivateCreateUserErrors,
    ThrowOnError
  >({
    responseTransformer: privateCreateUserResponseTransformer,
    responseType: 'json',
    url: '/api/v1/private/users/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Health Check
 */
export const systemHealthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<SystemHealthCheckData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SystemHealthCheckResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/health-check/',
    ...options,
  })
}
